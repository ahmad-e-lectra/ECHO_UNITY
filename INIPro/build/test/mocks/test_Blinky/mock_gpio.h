/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_GPIO_H
#define _MOCK_GPIO_H

#include "unity.h"
#include "gpio.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_gpio_Init(void);
void mock_gpio_Destroy(void);
void mock_gpio_Verify(void);




#define SysCtl_delay_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("SysCtl_delay requires _Ignore (not AndReturn)");
#define SysCtl_delay_Ignore() SysCtl_delay_CMockIgnore()
void SysCtl_delay_CMockIgnore(void);
#define SysCtl_delay_StopIgnore() SysCtl_delay_CMockStopIgnore()
void SysCtl_delay_CMockStopIgnore(void);
#define SysCtl_delay_ExpectAndReturn(count, cmock_retval) TEST_FAIL_MESSAGE("SysCtl_delay requires _Expect (not AndReturn)");
#define SysCtl_delay_Expect(count) SysCtl_delay_CMockExpect(__LINE__, count)
void SysCtl_delay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t count);
typedef void (* CMOCK_SysCtl_delay_CALLBACK)(uint32_t count, int cmock_num_calls);
void SysCtl_delay_AddCallback(CMOCK_SysCtl_delay_CALLBACK Callback);
void SysCtl_delay_Stub(CMOCK_SysCtl_delay_CALLBACK Callback);
#define SysCtl_delay_StubWithCallback SysCtl_delay_Stub
#define GPIO_writePin_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("GPIO_writePin requires _Ignore (not AndReturn)");
#define GPIO_writePin_Ignore() GPIO_writePin_CMockIgnore()
void GPIO_writePin_CMockIgnore(void);
#define GPIO_writePin_StopIgnore() GPIO_writePin_CMockStopIgnore()
void GPIO_writePin_CMockStopIgnore(void);
#define GPIO_writePin_ExpectAndReturn(pin, val, cmock_retval) TEST_FAIL_MESSAGE("GPIO_writePin requires _Expect (not AndReturn)");
#define GPIO_writePin_Expect(pin, val) GPIO_writePin_CMockExpect(__LINE__, pin, val)
void GPIO_writePin_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t pin, uint32_t val);
typedef void (* CMOCK_GPIO_writePin_CALLBACK)(uint32_t pin, uint32_t val, int cmock_num_calls);
void GPIO_writePin_AddCallback(CMOCK_GPIO_writePin_CALLBACK Callback);
void GPIO_writePin_Stub(CMOCK_GPIO_writePin_CALLBACK Callback);
#define GPIO_writePin_StubWithCallback GPIO_writePin_Stub
#define GPIO_readPin_Ignore() TEST_FAIL_MESSAGE("GPIO_readPin requires _IgnoreAndReturn");
#define GPIO_readPin_IgnoreAndReturn(cmock_retval) GPIO_readPin_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GPIO_readPin_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define GPIO_readPin_StopIgnore() GPIO_readPin_CMockStopIgnore()
void GPIO_readPin_CMockStopIgnore(void);
#define GPIO_readPin_Expect(pin) TEST_FAIL_MESSAGE("GPIO_readPin requires _ExpectAndReturn");
#define GPIO_readPin_ExpectAndReturn(pin, cmock_retval) GPIO_readPin_CMockExpectAndReturn(__LINE__, pin, cmock_retval)
void GPIO_readPin_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t pin, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_GPIO_readPin_CALLBACK)(uint32_t pin, int cmock_num_calls);
void GPIO_readPin_AddCallback(CMOCK_GPIO_readPin_CALLBACK Callback);
void GPIO_readPin_Stub(CMOCK_GPIO_readPin_CALLBACK Callback);
#define GPIO_readPin_StubWithCallback GPIO_readPin_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
