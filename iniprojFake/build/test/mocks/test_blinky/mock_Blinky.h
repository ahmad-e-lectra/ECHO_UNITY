/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_BLINKY_H
#define _MOCK_BLINKY_H

#include "unity.h"
#include "Blinky.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_Blinky_Init(void);
void mock_Blinky_Destroy(void);
void mock_Blinky_Verify(void);




#define LedTwitch_off_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_off requires _Ignore (not AndReturn)");
#define LedTwitch_off_Ignore() LedTwitch_off_CMockIgnore()
void LedTwitch_off_CMockIgnore(void);
#define LedTwitch_off_StopIgnore() LedTwitch_off_CMockStopIgnore()
void LedTwitch_off_CMockStopIgnore(void);
#define LedTwitch_off_ExpectAndReturn(pin, cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_off requires _Expect (not AndReturn)");
#define LedTwitch_off_Expect(pin) LedTwitch_off_CMockExpect(__LINE__, pin)
void LedTwitch_off_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t pin);
typedef void (* CMOCK_LedTwitch_off_CALLBACK)(uint32_t pin, int cmock_num_calls);
void LedTwitch_off_AddCallback(CMOCK_LedTwitch_off_CALLBACK Callback);
void LedTwitch_off_Stub(CMOCK_LedTwitch_off_CALLBACK Callback);
#define LedTwitch_off_StubWithCallback LedTwitch_off_Stub
#define LedTwitch_on_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_on requires _Ignore (not AndReturn)");
#define LedTwitch_on_Ignore() LedTwitch_on_CMockIgnore()
void LedTwitch_on_CMockIgnore(void);
#define LedTwitch_on_StopIgnore() LedTwitch_on_CMockStopIgnore()
void LedTwitch_on_CMockStopIgnore(void);
#define LedTwitch_on_ExpectAndReturn(pin, cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_on requires _Expect (not AndReturn)");
#define LedTwitch_on_Expect(pin) LedTwitch_on_CMockExpect(__LINE__, pin)
void LedTwitch_on_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t pin);
typedef void (* CMOCK_LedTwitch_on_CALLBACK)(uint32_t pin, int cmock_num_calls);
void LedTwitch_on_AddCallback(CMOCK_LedTwitch_on_CALLBACK Callback);
void LedTwitch_on_Stub(CMOCK_LedTwitch_on_CALLBACK Callback);
#define LedTwitch_on_StubWithCallback LedTwitch_on_Stub
#define LedTwitch_start_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_start requires _Ignore (not AndReturn)");
#define LedTwitch_start_Ignore() LedTwitch_start_CMockIgnore()
void LedTwitch_start_CMockIgnore(void);
#define LedTwitch_start_StopIgnore() LedTwitch_start_CMockStopIgnore()
void LedTwitch_start_CMockStopIgnore(void);
#define LedTwitch_start_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_start requires _Expect (not AndReturn)");
#define LedTwitch_start_Expect() LedTwitch_start_CMockExpect(__LINE__)
void LedTwitch_start_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_LedTwitch_start_CALLBACK)(int cmock_num_calls);
void LedTwitch_start_AddCallback(CMOCK_LedTwitch_start_CALLBACK Callback);
void LedTwitch_start_Stub(CMOCK_LedTwitch_start_CALLBACK Callback);
#define LedTwitch_start_StubWithCallback LedTwitch_start_Stub
#define LedTwitch_stop_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_stop requires _Ignore (not AndReturn)");
#define LedTwitch_stop_Ignore() LedTwitch_stop_CMockIgnore()
void LedTwitch_stop_CMockIgnore(void);
#define LedTwitch_stop_StopIgnore() LedTwitch_stop_CMockStopIgnore()
void LedTwitch_stop_CMockStopIgnore(void);
#define LedTwitch_stop_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("LedTwitch_stop requires _Expect (not AndReturn)");
#define LedTwitch_stop_Expect() LedTwitch_stop_CMockExpect(__LINE__)
void LedTwitch_stop_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_LedTwitch_stop_CALLBACK)(int cmock_num_calls);
void LedTwitch_stop_AddCallback(CMOCK_LedTwitch_stop_CALLBACK Callback);
void LedTwitch_stop_Stub(CMOCK_LedTwitch_stop_CALLBACK Callback);
#define LedTwitch_stop_StubWithCallback LedTwitch_stop_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
